{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user within the Huddle application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "displayName": {
          "type": "string",
          "description": "The user's display name."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "photoURL": {
          "type": "string",
          "description": "URL of the user's profile photo.",
          "format": "uri"
        },
        "role": {
          "type": "string",
          "description": "The user's role within the company (admin, user, client)."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company the user belongs to. (Relationship: Company 1:N User)"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the user account was created.",
          "format": "date-time"
        },
        "lastSeenAt": {
          "type": "string",
          "description": "Timestamp of when the user was last seen online.",
          "format": "date-time"
        },
        "level": {
          "type": "number",
          "description": "The user's current level."
        },
        "xp": {
          "type": "number",
          "description": "The user's current experience points."
        }
      },
      "required": [
        "id",
        "displayName",
        "email",
        "role",
        "companyId",
        "createdAt",
        "lastSeenAt",
        "level",
        "xp"
      ]
    },
    "Company": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Company",
      "type": "object",
      "description": "Represents a company using the Huddle application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Company entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the company."
        },
        "ownerUid": {
          "type": "string",
          "description": "Reference to the User who owns the company. (Relationship: User 1:N Company)"
        },
        "plan": {
          "type": "string",
          "description": "The company's subscription plan (core, pro, business)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the company was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "ownerUid",
        "plan",
        "createdAt"
      ]
    },
    "Channel": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Channel",
      "type": "object",
      "description": "Represents a communication channel within a company.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Channel entity."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company the channel belongs to. (Relationship: Company 1:N Channel)"
        },
        "name": {
          "type": "string",
          "description": "The name of the channel."
        },
        "kind": {
          "type": "string",
          "description": "The type of channel (team, project, dm)."
        },
        "members": {
          "type": "array",
          "description": "List of user IDs who are members of the channel.",
          "items": {
            "type": "string"
          }
        },
        "projectId": {
          "type": "string",
          "description": "Reference to the Project the channel is associated with, if any. (Relationship: Project 1:N Channel)"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the channel was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "companyId",
        "name",
        "kind",
        "members",
        "createdAt"
      ]
    },
    "Message": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Message",
      "type": "object",
      "description": "Represents a message within a channel.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Message entity."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company the message belongs to. (Relationship: Company 1:N Message)"
        },
        "fromUid": {
          "type": "string",
          "description": "Reference to the User who sent the message. (Relationship: User 1:N Message)"
        },
        "channelId": {
          "type": "string",
          "description": "Reference to the Channel the message was sent in. (Relationship: Channel 1:N Message)"
        },
        "text": {
          "type": "string",
          "description": "The content of the message."
        },
        "embeds": {
          "type": "string",
          "description": "Map of embedded content within the message.",
          "format": "map"
        },
        "threadRootId": {
          "type": "string",
          "description": "Reference to the root message of the thread, if this is a thread reply. (Relationship: Message 1:N Message (Thread))"
        },
        "reactions": {
          "type": "string",
          "description": "Map of emoji reactions to the message, with the count for each emoji.",
          "format": "map"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the message was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "companyId",
        "fromUid",
        "channelId",
        "text",
        "createdAt"
      ]
    },
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a project within a company.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Project entity."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company the project belongs to. (Relationship: Company 1:N Project)"
        },
        "name": {
          "type": "string",
          "description": "The name of the project."
        },
        "description": {
          "type": "string",
          "description": "A description of the project."
        },
        "status": {
          "type": "string",
          "description": "The status of the project (active, archived)."
        },
        "createdBy": {
          "type": "string",
          "description": "Reference to the User who created the project. (Relationship: User 1:N Project)"
        },
        "members": {
          "type": "array",
          "description": "List of user IDs who are members of the project.",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the project was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "companyId",
        "name",
        "description",
        "status",
        "createdBy",
        "members",
        "createdAt"
      ]
    },
    "Task": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Task",
      "type": "object",
      "description": "Represents a task within a project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Task entity."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to the Project the task belongs to. (Relationship: Project 1:N Task)"
        },
        "title": {
          "type": "string",
          "description": "The title of the task."
        },
        "description": {
          "type": "string",
          "description": "A description of the task."
        },
        "assignee": {
          "type": "string",
          "description": "Reference to the User assigned to the task. (Relationship: User 1:N Task)"
        },
        "dueDate": {
          "type": "string",
          "description": "The due date of the task.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "The status of the task (todo, in_progress, done)."
        },
        "percentComplete": {
          "type": "number",
          "description": "The percentage of the task that is complete."
        },
        "order": {
          "type": "number",
          "description": "The order of the task within the project."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company the task belongs to. (Relationship: Company 1:N Task)"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the task was created.",
          "format": "date-time"
        },
        "suggestions": {
          "type": "string",
          "description": "Suggestions for the next step in the task."
        }
      },
      "required": [
        "id",
        "projectId",
        "title",
        "description",
        "assignee",
        "dueDate",
        "status",
        "percentComplete",
        "order",
        "companyId",
        "createdAt"
      ]
    },
    "Invoice": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Invoice",
      "type": "object",
      "description": "Represents an invoice.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Invoice entity."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company the invoice belongs to. (Relationship: Company 1:N Invoice)"
        },
        "clientId": {
          "type": "string",
          "description": "Reference to the Client the invoice is for. (Relationship: Client 1:N Invoice)"
        },
        "number": {
          "type": "string",
          "description": "The invoice number."
        },
        "status": {
          "type": "string",
          "description": "The status of the invoice (draft, sent, paid, overdue)."
        },
        "subtotal": {
          "type": "number",
          "description": "The subtotal of the invoice."
        },
        "tax": {
          "type": "number",
          "description": "The tax amount of the invoice."
        },
        "total": {
          "type": "number",
          "description": "The total amount of the invoice."
        },
        "currency": {
          "type": "string",
          "description": "The currency of the invoice."
        },
        "dueDate": {
          "type": "string",
          "description": "The due date of the invoice.",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the invoice was created.",
          "format": "date-time"
        },
        "repeatMonthly": {
          "type": "boolean",
          "description": "Whether the invoice should be repeated monthly."
        },
        "lastGeneratedAt": {
          "type": "string",
          "description": "Timestamp of when the invoice was last generated.",
          "format": "date-time"
        },
        "payLink": {
          "type": "string",
          "description": "The payment link for the invoice.",
          "format": "uri"
        },
        "portalToken": {
          "type": "string",
          "description": "Token for the client portal view of the invoice."
        }
      },
      "required": [
        "id",
        "companyId",
        "clientId",
        "number",
        "status",
        "subtotal",
        "tax",
        "total",
        "currency",
        "dueDate",
        "createdAt",
        "repeatMonthly"
      ]
    },
    "LineItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LineItem",
      "type": "object",
      "description": "Represents a line item on an invoice.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the LineItem entity."
        },
        "invoiceId": {
          "type": "string",
          "description": "Reference to the Invoice the line item belongs to. (Relationship: Invoice 1:N LineItem)"
        },
        "description": {
          "type": "string",
          "description": "The description of the line item."
        },
        "qty": {
          "type": "number",
          "description": "The quantity of the line item."
        },
        "unitPrice": {
          "type": "number",
          "description": "The unit price of the line item."
        }
      },
      "required": [
        "id",
        "invoiceId",
        "description",
        "qty",
        "unitPrice"
      ]
    },
    "Client": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Client",
      "type": "object",
      "description": "Represents a client.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Client entity."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company the client belongs to. (Relationship: Company 1:N Client)"
        },
        "name": {
          "type": "string",
          "description": "The name of the client."
        },
        "email": {
          "type": "string",
          "description": "The email address of the client.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the client."
        },
        "website": {
          "type": "string",
          "description": "The website of the client.",
          "format": "uri"
        },
        "notes": {
          "type": "string",
          "description": "Notes about the client."
        },
        "dealValue": {
          "type": "number",
          "description": "The value of the deal with the client."
        },
        "lastContactAt": {
          "type": "string",
          "description": "Timestamp of when the client was last contacted.",
          "format": "date-time"
        },
        "aiReminderEnabled": {
          "type": "boolean",
          "description": "Whether AI reminders are enabled for the client."
        }
      },
      "required": [
        "id",
        "companyId",
        "name",
        "email",
        "phone",
        "website"
      ]
    },
    "Expense": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Expense",
      "type": "object",
      "description": "Represents an expense.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Expense entity."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company the expense belongs to. (Relationship: Company 1:N Expense)"
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who submitted the expense. (Relationship: User 1:N Expense)"
        },
        "vendor": {
          "type": "string",
          "description": "The vendor of the expense."
        },
        "date": {
          "type": "string",
          "description": "The date of the expense.",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "description": "The amount of the expense."
        },
        "currency": {
          "type": "string",
          "description": "The currency of the expense."
        },
        "category": {
          "type": "string",
          "description": "The category of the expense."
        },
        "imagePath": {
          "type": "string",
          "description": "The path to the image of the expense receipt.",
          "format": "uri"
        },
        "ocrRaw": {
          "type": "string",
          "description": "The raw OCR text from the expense receipt."
        },
        "aiCategoryGuess": {
          "type": "string",
          "description": "The AI's guess of the expense category."
        }
      },
      "required": [
        "id",
        "companyId",
        "userId",
        "vendor",
        "date",
        "amount",
        "currency",
        "category"
      ]
    },
    "TimeEntry": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TimeEntry",
      "type": "object",
      "description": "Represents a time entry.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the TimeEntry entity."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company the time entry belongs to. (Relationship: Company 1:N TimeEntry)"
        },
        "projectId": {
          "type": "string",
          "description": "Reference to the Project the time entry is for. (Relationship: Project 1:N TimeEntry)"
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who created the time entry. (Relationship: User 1:N TimeEntry)"
        },
        "startedAt": {
          "type": "string",
          "description": "Timestamp of when the time entry started.",
          "format": "date-time"
        },
        "stoppedAt": {
          "type": "string",
          "description": "Timestamp of when the time entry stopped.",
          "format": "date-time"
        },
        "durationSec": {
          "type": "number",
          "description": "The duration of the time entry in seconds."
        },
        "billableRate": {
          "type": "number",
          "description": "The billable rate for the time entry."
        },
        "note": {
          "type": "string",
          "description": "A note about the time entry."
        }
      },
      "required": [
        "id",
        "companyId",
        "projectId",
        "userId",
        "startedAt"
      ]
    },
    "Document": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Document",
      "type": "object",
      "description": "Represents a document.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Document entity."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company the document belongs to. (Relationship: Company 1:N Document)"
        },
        "uploadedBy": {
          "type": "string",
          "description": "Reference to the User who uploaded the document. (Relationship: User 1:N Document)"
        },
        "name": {
          "type": "string",
          "description": "The name of the document."
        },
        "type": {
          "type": "string",
          "description": "The type of the document (pdf, image, doc, other)."
        },
        "storagePath": {
          "type": "string",
          "description": "The path to the document in storage.",
          "format": "uri"
        },
        "summary": {
          "type": "string",
          "description": "A summary of the document."
        },
        "bullets": {
          "type": "array",
          "description": "A list of bullet points summarizing the document.",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the document was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "companyId",
        "uploadedBy",
        "name",
        "type",
        "storagePath",
        "createdAt"
      ]
    },
    "Notification": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Notification",
      "type": "object",
      "description": "Represents a notification.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Notification entity."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company the notification belongs to. (Relationship: Company 1:N Notification)"
        },
        "uid": {
          "type": "string",
          "description": "Reference to the User the notification is for. (Relationship: User 1:N Notification)"
        },
        "type": {
          "type": "string",
          "description": "The type of notification (invoice, task, crm, system)."
        },
        "title": {
          "type": "string",
          "description": "The title of the notification."
        },
        "body": {
          "type": "string",
          "description": "The body of the notification."
        },
        "read": {
          "type": "boolean",
          "description": "Whether the notification has been read."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the notification was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "companyId",
        "uid",
        "type",
        "title",
        "body",
        "read",
        "createdAt"
      ]
    },
    "Report": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Report",
      "type": "object",
      "description": "Represents a report.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Report entity."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company the report belongs to. (Relationship: Company 1:N Report)"
        },
        "type": {
          "type": "string",
          "description": "The type of report (daily, weekly)."
        },
        "payload": {
          "type": "string",
          "description": "The payload of the report.",
          "format": "map"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the report was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "companyId",
        "type",
        "payload",
        "createdAt"
      ]
    },
    "PortalView": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PortalView",
      "type": "object",
      "description": "Represents a portal view for an invoice.",
      "properties": {
        "token": {
          "type": "string",
          "description": "Unique token for the portal view."
        },
        "invoiceId": {
          "type": "string",
          "description": "Reference to the Invoice the portal view is for. (Relationship: Invoice 1:N PortalView)"
        },
        "expiresAt": {
          "type": "string",
          "description": "Timestamp of when the portal view expires.",
          "format": "date-time"
        }
      },
      "required": [
        "token",
        "invoiceId"
      ]
    },
    "Kudo": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Kudo",
      "type": "object",
      "description": "Represents a kudo given to a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Kudo entity."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company the kudo belongs to. (Relationship: Company 1:N Kudo)"
        },
        "fromUid": {
          "type": "string",
          "description": "Reference to the User who gave the kudo. (Relationship: User 1:N Kudo (Giver))"
        },
        "toUid": {
          "type": "string",
          "description": "Reference to the User who received the kudo. (Relationship: User 1:N Kudo (Receiver))"
        },
        "reason": {
          "type": "string",
          "description": "The reason for the kudo (smart_move, assist, automation)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the kudo was created.",
          "format": "date-time"
        },
        "weight": {
          "type": "number",
          "description": "The weight of the kudo."
        }
      },
      "required": [
        "id",
        "companyId",
        "fromUid",
        "toUid",
        "reason",
        "createdAt",
        "weight"
      ]
    },
    "Presence": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Presence",
      "type": "object",
      "description": "Represents the presence status of a user.",
      "properties": {
        "uid": {
          "type": "string",
          "description": "Unique identifier for the Presence entity."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company the presence belongs to. (Relationship: Company 1:N Presence)"
        },
        "lastSeenAt": {
          "type": "string",
          "description": "Timestamp of when the user was last seen online.",
          "format": "date-time"
        }
      }
    },
    "IdeaCapsule": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "IdeaCapsule",
      "type": "object",
      "description": "Represents a new business idea or concept within The Lab.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Idea Capsule."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company the idea belongs to."
        },
        "title": {
          "type": "string",
          "description": "The title or name of the idea."
        },
        "vision": {
          "type": "string",
          "description": "A detailed description of the idea's vision."
        },
        "tags": {
          "type": "array",
          "description": "A list of tags for categorizing the idea.",
          "items": {
            "type": "string"
          }
        },
        "stage": {
          "type": "string",
          "description": "The current stage of the idea.",
          "enum": ["Concept", "Build", "Live"]
        },
        "createdBy": {
          "type": "string",
          "description": "Reference to the User who created the idea."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the idea was created.",
          "format": "date-time"
        }
      },
      "required": ["id", "companyId", "title", "vision", "stage", "createdBy", "createdAt"]
    },
    "LabExperiment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LabExperiment",
      "type": "object",
      "description": "Represents an experiment or task performed on an Idea Capsule.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the experiment."
        },
        "ideaId": {
          "type": "string",
          "description": "Reference to the IdeaCapsule this experiment belongs to."
        },
        "companyId": {
          "type": "string",
          "description": "Reference to the Company the experiment belongs to."
        },
        "title": {
          "type": "string",
          "description": "The title of the experiment."
        },
        "outcome": {
          "type": "string",
          "description": "A summary of the experiment's outcome."
        },
        "xpAwarded": {
          "type": "number",
          "description": "The amount of XP awarded for completing the experiment."
        },
        "runBy": {
          "type": "string",
          "description": "Reference to the User who ran the experiment."
        },
        "relatedProjectId": {
          "type": "string",
          "description": "Optional reference to a Project in Huddle."
        },
        "relatedTaskId": {
          "type": "string",
          "description": "Optional reference to a Task in Huddle."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the experiment was completed.",
          "format": "date-time"
        }
      },
      "required": ["id", "ideaId", "companyId", "title", "xpAwarded", "runBy", "createdAt"]
    },
    "LabBadge": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LabBadge",
      "type": "object",
      "description": "Represents a badge or achievement earned by a user in The Lab.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the badge."
        },
        "name": {
          "type": "string",
          "description": "The name of the badge (e.g., 'Idea Machine', 'Prolific Prototyper')."
        },
        "description": {
          "type": "string",
          "description": "What the user did to earn the badge."
        },
        "icon": {
          "type": "string",
          "description": "An emoji or icon name representing the badge."
        },
        "awardedTo": {
          "type": "string",
          "description": "Reference to the User who was awarded the badge."
        },
        "awardedAt": {
          "type": "string",
          "description": "Timestamp of when the badge was awarded.",
          "format": "date-time"
        }
      },
      "required": ["id", "name", "description", "icon", "awardedTo", "awardedAt"]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. The `userId` parameter corresponds to the Firebase Auth UID.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching the Firebase Auth UID."
            }
          ]
        }
      },
      {
        "path": "/companies/{companyId}",
        "definition": {
          "entityName": "Company",
          "schema": {
            "$ref": "#/backend/entities/Company"
          },
          "description": "Stores company information. The `companyId` is used to scope data access.",
          "params": [
            {
              "name": "companyId",
              "description": "The unique identifier for the company."
            }
          ]
        }
      },
      {
        "path": "/channels/{channelId}",
        "definition": {
          "entityName": "Channel",
          "schema": {
            "$ref": "#/backend/entities/Channel"
          },
          "description": "Stores channel information. Includes denormalized 'members' array for authorization independence.",
          "params": [
            {
              "name": "channelId",
              "description": "The unique identifier for the channel."
            }
          ]
        }
      },
      {
        "path": "/channels/{channelId}/messages/{messageId}",
        "definition": {
          "entityName": "Message",
          "schema": {
            "$ref": "#/backend/entities/Message"
          },
          "description": "Stores messages within a channel.  Includes denormalized data from the parent channel, like the `members` array, to ensure authorization independence.",
          "params": [
            {
              "name": "channelId",
              "description": "The unique identifier for the channel the message belongs to."
            },
            {
              "name": "messageId",
              "description": "The unique identifier for the message."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores project information. Includes the 'members' array.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/tasks/{taskId}",
        "definition": {
          "entityName": "Task",
          "schema": {
            "$ref": "#/backend/entities/Task"
          },
          "description": "Stores tasks within a project.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project the task belongs to."
            },
            {
              "name": "taskId",
              "description": "The unique identifier for the task."
            }
          ]
        }
      },
      {
        "path": "/invoices/{invoiceId}",
        "definition": {
          "entityName": "Invoice",
          "schema": {
            "$ref": "#/backend/entities/Invoice"
          },
          "description": "Stores invoice information.",
          "params": [
            {
              "name": "invoiceId",
              "description": "The unique identifier for the invoice."
            }
          ]
        }
      },
      {
        "path": "/invoices/{invoiceId}/lineItems/{lineItemId}",
        "definition": {
          "entityName": "LineItem",
          "schema": {
            "$ref": "#/backend/entities/LineItem"
          },
          "description": "Stores line items within an invoice.",
          "params": [
            {
              "name": "invoiceId",
              "description": "The unique identifier for the invoice the line item belongs to."
            },
            {
              "name": "lineItemId",
              "description": "The unique identifier for the line item."
            }
          ]
        }
      },
      {
        "path": "/clients/{clientId}",
        "definition": {
          "entityName": "Client",
          "schema": {
            "$ref": "#/backend/entities/Client"
          },
          "description": "Stores client information.",
          "params": [
            {
              "name": "clientId",
              "description": "The unique identifier for the client."
            }
          ]
        }
      },
      {
        "path": "/expenses/{expenseId}",
        "definition": {
          "entityName": "Expense",
          "schema": {
            "$ref": "#/backend/entities/Expense"
          },
          "description": "Stores expense information.",
          "params": [
            {
              "name": "expenseId",
              "description": "The unique identifier for the expense."
            }
          ]
        }
      },
      {
        "path": "/timeEntries/{timeEntryId}",
        "definition": {
          "entityName": "TimeEntry",
          "schema": {
            "$ref": "#/backend/entities/TimeEntry"
          },
          "description": "Stores time entry information.",
          "params": [
            {
              "name": "timeEntryId",
              "description": "The unique identifier for the time entry."
            }
          ]
        }
      },
      {
        "path": "/documents/{docId}",
        "definition": {
          "entityName": "Document",
          "schema": {
            "$ref": "#/backend/entities/Document"
          },
          "description": "Stores document metadata.",
          "params": [
            {
              "name": "docId",
              "description": "The unique identifier for the document."
            }
          ]
        }
      },
      {
        "path": "/notifications/{notificationId}",
        "definition": {
          "entityName": "Notification",
          "schema": {
            "$ref": "#/backend/entities/Notification"
          },
          "description": "Stores notification information.",
          "params": [
            {
              "name": "notificationId",
              "description": "The unique identifier for the notification."
            }
          ]
        }
      },
      {
        "path": "/reports/{reportId}",
        "definition": {
          "entityName": "Report",
          "schema": {
            "$ref": "#/backend/entities/Report"
          },
          "description": "Stores report data.",
          "params": [
            {
              "name": "reportId",
              "description": "The unique identifier for the report."
            }
          ]
        }
      },
      {
        "path": "/portalViews/{token}",
        "definition": {
          "entityName": "PortalView",
          "schema": {
            "$ref": "#/backend/entities/PortalView"
          },
          "description": "Stores portal view tokens for invoices.",
          "params": [
            {
              "name": "token",
              "description": "The unique token for the portal view."
            }
          ]
        }
      },
      {
        "path": "/kudos/{kudoId}",
        "definition": {
          "entityName": "Kudo",
          "schema": {
            "$ref": "#/backend/entities/Kudo"
          },
          "description": "Stores kudos given to users.",
          "params": [
            {
              "name": "kudoId",
              "description": "The unique identifier for the kudo."
            }
          ]
        }
      },
      {
        "path": "/presence/{uid}",
        "definition": {
          "entityName": "Presence",
          "schema": {
            "$ref": "#/backend/entities/Presence"
          },
          "description": "Stores user presence status.",
          "params": [
            {
              "name": "uid",
              "description": "The unique identifier for the user (UID)."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{uid}",
        "definition": {
          "entityName": "adminRole",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "A document here represents a user with the 'admin' role. Existence of the document confers the role.",
          "params": [
            {
              "name": "uid",
              "description": "The unique identifier for the user who has the admin role."
            }
          ]
        }
      },
      {
        "path": "/ideaCapsules/{ideaId}",
        "definition": {
          "entityName": "IdeaCapsule",
          "schema": { "$ref": "#/backend/entities/IdeaCapsule" },
          "description": "Stores idea capsules for The Lab feature.",
          "params": [{ "name": "ideaId", "description": "The unique identifier for the idea capsule." }]
        }
      },
      {
        "path": "/ideaCapsules/{ideaId}/experiments/{experimentId}",
        "definition": {
          "entityName": "LabExperiment",
          "schema": { "$ref": "#/backend/entities/LabExperiment" },
          "description": "Stores experiments related to a specific idea capsule.",
          "params": [
            { "name": "ideaId", "description": "The ID of the parent idea capsule." },
            { "name": "experimentId", "description": "The unique ID for the lab experiment." }
          ]
        }
      },
      {
        "path": "/users/{userId}/labBadges/{badgeId}",
        "definition": {
          "entityName": "LabBadge",
          "schema": { "$ref": "#/backend/entities/LabBadge" },
          "description": "Stores badges awarded to a user for their work in The Lab.",
          "params": [
            { "name": "userId", "description": "The ID of the user who earned the badge." },
            { "name": "badgeId", "description": "The unique ID for the lab badge." }
          ]
        }
      }
    ],
    "reasoning": "This Firestore structure is designed to support the Huddle application, prioritizing security, scalability, and debuggability based on the core design principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), QAPs (Rules are not Filters), and Invariants.\n\nAuthorization Independence is achieved through denormalization. For example, access to messages within a channel depends on channel membership. Therefore, the `members` field (or a hash of it) from the `/channels/{channelId}` document MUST be copied into each `/channels/{channelId}/messages/{messageId}` document. This eliminates the need for `get()` calls in security rules when writing or reading messages and ensures atomic operations.\n\nStructural Segregation is applied by keeping data with different security postures in separate collections. For example, user-owned data is stored under `/users/{userId}`, while company-wide data resides in top-level collections like `/companies` or `/channels`. This simplifies security rules by ensuring that all documents within a collection share similar access requirements.\n\nAccess Modeling utilizes consistent patterns: private user data under `/users/{userId}`, hierarchical paths for user-owned entities like `/projects/{projectId}/tasks/{taskId}`, membership maps for collaborative data (denormalized where necessary), and dedicated collections (e.g., `/roles_admin/{uid}`) for global roles.\n\nThe structure supports QAPs (Rules are not Filters) by using structural segregation and denormalization. For example, listing messages within a channel is secured by the denormalized `members` field on the message. If the user is not a member of the channel, they cannot list the messages, regardless of any other data in the message.\n\nInvariants are maintained by using path-based ownership and timestamps. For example, the `companyId` field is present in every document to enforce company scoping, and timestamps like `createdAt` and `lastSeenAt` provide auditability.\n\nThis structure ensures that security rules can be written clearly and efficiently, without relying on complex logic or hierarchical data access. It also provides a scalable and maintainable foundation for the Huddle application."
  }
}
